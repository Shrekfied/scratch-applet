; A thread is a list:
;
;	1 running?		becomes false when thread stops
;	2 owner				script owner (a sprite or the stage)
;	3 oldstate		state saved when a block runs a sublist of commands
;	4 cmds				current command list
;	5 ip					index of the current command in cmds
;	6 end-msecs		used by timed commmads such as glide
;	7 tmp					used by timed commmads and repeat
;
; <threads> is a global list of running threads
; <current-thread> is the thread currently being run by step-thread
; <yield?> is set to true when the current thread wishes to yield
; <stopall> is set to true when the stopall command is invoked

to thread-startup
	stop-all-threads
	let [ fields [running? owner oldstate cmds ip end-msecs tmp]
				field "]
	dotimes [i count :fields] [
		make "field nth :i :fields
		define word "thread- :field [] (se [output nth] :i [:<current-thread>])
		define word "set-thread- :field [v] (se [setnth] :i [:<current-thread> :v])
	]
end

to stop-all-threads
	if (name? "<threads>) [
		dolist [thrd :<threads>][abort-thread :thrd]]
	make "<threads> []
	make "<stopall> true
end

to abort-thread :<current-thread>
	stop-thread
	if thread-ip > count thread-cmds [stop]
	let [
		cmd item thread-ip thread-cmds
		chan get thread-owner "midichan]
	if list? thread-tmp [stop]
	if list? :chan [stop]
	if ((first :cmd) = "noteOn:duration:elapsed:from:) [midinoteoff :chan thread-tmp]
	if ((first :cmd) = "drum:duration:elapsed:from:) [midinoteoff 10 thread-tmp]
	if ((first :cmd) = "doPlaySoundAndWait) [stopSound thread-tmp]
end

to stop-thread
	set-thread-running? false
	let [topCmds item 4 (thread-top :<current-thread>)]
	if not empty? :topCmds [put (first :topCmds) "thread []]
end

; return the thread for the top-level command list for this thread
to thread-top :thrd
	loop [
		if empty? (item 3 :thrd) [output :thrd]
		make "thrd (item 3 :thrd)]
end

; start a thread for a hat block and return the thread object
to start-script :sprite :hat :isKeyEvent
	let [cmdList butfirst :hat]
	if empty? :cmdList [output [false]]
	let [oldThrd get (first :cmdList) "thread]
	if not empty? :oldThrd [
		if (first :oldThrd) [ ; the thread for this hat is running
			ifelse :isKeyEvent
				[output [false]]
				[abort-thread :oldThrd]]]
	let [newThrd start-thread :sprite :cmdList]
	put (first :cmdList) "thread :newThrd
	output :newThrd
end

; start a thread and return the thread object
to start-thread :sprite :cmds
	let [thrd (list true :sprite [] :cmds 1 [] [])]
	make "<threads> lput :thrd :<threads>
	output :thrd
end

; step each thread in <threads> and remove any threads that are no longer running
to step-all-threads
	let [oldThreads :<threads>]
	make "<threads> []
	make "<stopall> false
	dolist [thrd :oldThreads] [
		step-thread :thrd
			if :<stopall> [
				dolist [t :oldThreads][abort-thread :t]
				stop]]
	dolist [thrd :oldThreads] [if first :thrd [make "<threads> lput :thrd :<threads>]]
end

; step a thread until it yields
to step-thread :<current-thread>
	if not thread-running? [stop]
	talkto thread-owner
	let [<yield?> false]
	loop [
		if thread-ip > count thread-cmds [end-list]
		if :<yield?> [stop]
		run eval-all-args (item thread-ip thread-cmds)
		updatePenTrails
		if :<yield?> [stop]
		set-thread-ip thread-ip + 1]
end

; run the given list of commands (used by control structure commands)
to run-list :cmdList
	set-thread-oldstate copylist :<current-thread>
	set-thread-cmds :cmdList
	set-thread-ip 0
	set-thread-end-msecs []
	set-thread-tmp []
end

to end-list
	ifelse empty? thread-oldstate
		[stop-thread yield]
		[ let [oldstate thread-oldstate]
			set-thread-oldstate (item 3 :oldstate)
			set-thread-cmds (item 4 :oldstate)
			set-thread-ip (item 5 :oldstate)
			set-thread-end-msecs (item 6 :oldstate)
			set-thread-tmp (item 7 :oldstate)
			if thread-ip > count thread-cmds [end-list stop]
			let [cmd first (item thread-ip thread-cmds)]
			if (or (:cmd = "doForever)(:cmd = "doForeverIf)(:cmd = "doRepeat)(:cmd = "doUntil)) [yield]
		]
end

; if the argument is a list, evaluate it. otherwise, return it
to eval-arg :arg
	if string? :arg [output quote :arg]
	if number? :arg [output :arg]
	if color? :arg [output :arg]
	if sprite? :arg [output :arg]
	if list? :arg [
		if ((count :arg) = 1) [
			if (list? first :arg) [output eval-expression eval-all-args first :arg]]
		output eval-expression eval-all-args :arg]
	if :arg = true [output :arg]
	if :arg = false [output :arg]
	output quote :arg
end

; evaluate an expression whose arguments have already been evaluted
to eval-expression :expr
	if (count :expr) = 0 [output :expr]
	if (count :expr) = 3 [
		if (count first :expr) < 3 [
			let [
					op item 1 :expr
					arg1 eval-arg item 2 :expr
					arg2 eval-arg item 3 :expr]
			if "+ = :op [output :arg1 + :arg2]
			if "- = :op [output :arg1 - :arg2]
			if "* = :op [output :arg1 * :arg2]
			if "/ = :op [output :arg1 / :arg2]
			if "\\ = :op [
				let [n :arg1 % :arg2]
				if :n < 0 [make "n :n + abs :arg2]
				output :n]
			if "< = :op [output :arg1 < :arg2]
			if "= = :op [output :arg1 = :arg2]
			if "> = :op [output :arg1 > :arg2]
			if "& = :op [output (and :arg1 :arg2)]
			if (char 124) = :op [output (or :arg1 :arg2)]]]	; 124 is | (vertical bar)
	output run :expr
end

; return a copy of the given command with all of its arguments evaluated
; however, do not evalute the arguments if the command is a control structure
to eval-all-args :cmd
	if is-control? :cmd [output :cmd]
	let [new-cmd copylist :cmd]
	dotimes [i (count :cmd) - 1] [
		setitem :i + 2 :new-cmd (eval-arg item :i + 2 :cmd)]
	output :new-cmd
end

define yield [] [make "<yield?> true]

; ******* control structures *******

; return true if the given command is a control structure
; (i.e. it decided when and how to evalutate it's arguments)
to is-control? :cmd
	if (count :cmd) = 0 [output false]
	output member? first :cmd [doForever doForeverIf doIf doIfElse doRepeat doUntil doWaitUntil]
end

to is-true? :expr
	if :expr = "false [output false]
	output eval-arg :expr
end

to doForever :cmdList
	run-list :cmdList
end

to doForeverIf :expr :cmdList
	ifelse is-true? :expr
		[run-list :cmdList]
		[yield]
end

to doIf :expr :cmdList
	if is-true? :expr [
		set-thread-ip thread-ip + 1
		run-list :cmdList]
end

to doIfElse :expr :trueCmdList :falseCmdList
	set-thread-ip thread-ip + 1
	ifelse is-true? :expr
		[run-list :trueCmdList]
		[run-list :falseCmdList]
end

to doRepeat :count :cmdList
	if empty? thread-tmp [set-thread-tmp eval-arg :count]
	if thread-tmp < 1 [set-thread-tmp [] stop]	; repeat finished
	set-thread-tmp thread-tmp - 1
	run-list :cmdList
end

to doUntil :expr :cmdList
	if not is-true? :expr [run-list :cmdList]
end

define doWaitUntil [expr] [if not is-true? :expr [yield]]

define doReturn [] [stop-thread yield]
